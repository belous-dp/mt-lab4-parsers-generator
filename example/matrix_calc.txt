###
#include "matrix.hpp"
###

e -> [matrix val]:
    t ep[$1.val] {$res.val = $2.val}
ep [matrix acc] -> [matrix val]:
    PLUS t ep[add(acc, $2.val)] {$res.val = $3.val}
    | MINUS t ep[sub(acc, $2.val)] {$res.val = $3.val}
    | ε {$res.val = acc}
t -> [matrix val]:
    f tp[$1.val] {$res.val = $2.val}
tp [matrix acc] -> [matrix val]:
    MMUL f tp[product(acc, $2.val)] {$res.val = $3.val}
    | MDIV f tp[division(acc, $2.val)] {$res.val = $3.val}
    | MUL f tp[prod(acc, $2.val)] {$res.val = $3.val}
    | DIV f tp[div(acc, $2.val)] {$res.val = $3.val}
    | ε {$res.val = acc}
f -> [matrix val]:
    i INV {$res.val = inverse($1.val)}
i -> [matrix val]:
    MATRIX {$res.val = parse_matrix($1)}
    | LP e RP {$res.val = $2.val}

MATRIX: r"\\[\\[.*?\\]\\]"
INV: r"\\^\\(-1\\)|\\^-1"
PLUS: "+"
MINUS: "-"
MMUL: "**"
MDIV: "//"
MUL: "*"
DIV: "/"
LP: "("
RP: ")"
